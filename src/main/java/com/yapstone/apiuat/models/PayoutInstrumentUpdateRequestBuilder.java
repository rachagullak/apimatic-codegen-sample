/*
 * YapstoneStagedOnBoardingServicesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.yapstone.apiuat.models;

import java.util.*;

public class PayoutInstrumentUpdateRequestBuilder {
    //the instance to build
    private PayoutInstrumentUpdateRequest payoutInstrumentUpdateRequest;

    /**
     * Default constructor to initialize the instance
     */
    public PayoutInstrumentUpdateRequestBuilder() {
        payoutInstrumentUpdateRequest = new PayoutInstrumentUpdateRequest();
    }

    /**
     * The partners externalId id for the Payout Instrument.
     */
    public PayoutInstrumentUpdateRequestBuilder externalId(String externalId) {
        payoutInstrumentUpdateRequest.setExternalId(externalId);
        return this;
    }

    /**
     * The Bank account information.
     */
    public PayoutInstrumentUpdateRequestBuilder bankAccount(BankAccountResource bankAccount) {
        payoutInstrumentUpdateRequest.setBankAccount(bankAccount);
        return this;
    }

    /**
     * Payment card details.
     */
    public PayoutInstrumentUpdateRequestBuilder paymentCard(CardDataResource paymentCard) {
        payoutInstrumentUpdateRequest.setPaymentCard(paymentCard);
        return this;
    }

    /**
     * The type of finanancial instrument [BANK_ACCOUNT]
     */
    public PayoutInstrumentUpdateRequestBuilder type(Type2Enum type) {
        payoutInstrumentUpdateRequest.setType(type);
        return this;
    }

    /**
     * The entity manages the Instrument. It can be merchant or marketplace.
     */
    public PayoutInstrumentUpdateRequestBuilder managedBy(List<String> managedBy) {
        payoutInstrumentUpdateRequest.setManagedBy(managedBy);
        return this;
    }

    /**
     * The status of the entity.
     */
    public PayoutInstrumentUpdateRequestBuilder status(EntityProductStatusResource status) {
        payoutInstrumentUpdateRequest.setStatus(status);
        return this;
    }

    public PayoutInstrumentUpdateRequestBuilder operationalStatus(InstrumentOperationalStatus operationalStatus) {
        payoutInstrumentUpdateRequest.setOperationalStatus(operationalStatus);
        return this;
    }

    /**
     * The owner of the asset
     */
    public PayoutInstrumentUpdateRequestBuilder owner(OwnerRequest owner) {
        payoutInstrumentUpdateRequest.setOwner(owner);
        return this;
    }

    /**
     * list of consent requests
     */
    public PayoutInstrumentUpdateRequestBuilder consents(List<Consent> consents) {
        payoutInstrumentUpdateRequest.setConsents(consents);
        return this;
    }

    /**
     * Products requested by marketplace.
     */
    public PayoutInstrumentUpdateRequestBuilder products(List<ProductEnum> products) {
        payoutInstrumentUpdateRequest.setProducts(products);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public PayoutInstrumentUpdateRequest build() {
        return payoutInstrumentUpdateRequest;
    }
}