/*
 * YapstoneStagedOnBoardingServicesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.yapstone.apiuat.models;

import java.util.*;

public class MarketplaceProductResourceBuilder {
    //the instance to build
    private MarketplaceProductResource marketplaceProductResource;

    /**
     * Default constructor to initialize the instance
     */
    public MarketplaceProductResourceBuilder() {
        marketplaceProductResource = new MarketplaceProductResource();
    }

    /**
     * The unique id of the resource
     */
    public MarketplaceProductResourceBuilder id(String id) {
        marketplaceProductResource.setId(id);
        return this;
    }

    /**
     * An array of consents.
     */
    public MarketplaceProductResourceBuilder consents(List<ConsentResource> consents) {
        marketplaceProductResource.setConsents(consents);
        return this;
    }

    /**
     * The unique id of the Asset Resource.
     */
    public MarketplaceProductResourceBuilder assetId(String assetId) {
        marketplaceProductResource.setAssetId(assetId);
        return this;
    }

    /**
     * The type of Payout Mode
     */
    public MarketplaceProductResourceBuilder payoutMode(PayoutModeEnum payoutMode) {
        marketplaceProductResource.setPayoutMode(payoutMode);
        return this;
    }

    /**
     * The ISO currency code enum for settlements.
     */
    public MarketplaceProductResourceBuilder settlementCurrency(String settlementCurrency) {
        marketplaceProductResource.setSettlementCurrency(settlementCurrency);
        return this;
    }

    /**
     * Subscription Type
     */
    public MarketplaceProductResourceBuilder subscriptionType(String subscriptionType) {
        marketplaceProductResource.setSubscriptionType(subscriptionType);
        return this;
    }

    /**
     * Primary Instrument for a given Marketplace product.
     */
    public MarketplaceProductResourceBuilder primaryInstrument(String primaryInstrument) {
        marketplaceProductResource.setPrimaryInstrument(primaryInstrument);
        return this;
    }

    /**
     * The status and reason for the status of the entity.
     */
    public MarketplaceProductResourceBuilder status(StatusReasonResource status) {
        marketplaceProductResource.setStatus(status);
        return this;
    }

    /**
     * The status of the entity.
     */
    public MarketplaceProductResourceBuilder chargesStatus(ActionStatusResource chargesStatus) {
        marketplaceProductResource.setChargesStatus(chargesStatus);
        return this;
    }

    /**
     * The status of the entity.
     */
    public MarketplaceProductResourceBuilder refundStatus(ActionStatusResource refundStatus) {
        marketplaceProductResource.setRefundStatus(refundStatus);
        return this;
    }

    /**
     * The token to use when making payments.
     */
    public MarketplaceProductResourceBuilder tokenForProcessing(String tokenForProcessing) {
        marketplaceProductResource.setTokenForProcessing(tokenForProcessing);
        return this;
    }

    /**
     * The platform to initiate payments on.
     */
    public MarketplaceProductResourceBuilder paymentPlatform(PaymentPlatformEnum paymentPlatform) {
        marketplaceProductResource.setPaymentPlatform(paymentPlatform);
        return this;
    }

    /**
     * An array of payout instruments.
     */
    public MarketplaceProductResourceBuilder payoutInstruments(List<MarketplaceProductPayoutInstrumentResource> payoutInstruments) {
        marketplaceProductResource.setPayoutInstruments(payoutInstruments);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public MarketplaceProductResource build() {
        return marketplaceProductResource;
    }
}