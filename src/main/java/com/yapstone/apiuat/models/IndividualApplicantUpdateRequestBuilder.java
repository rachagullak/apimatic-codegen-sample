/*
 * YapstoneStagedOnBoardingServicesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.yapstone.apiuat.models;

import java.util.*;

public class IndividualApplicantUpdateRequestBuilder {
    //the instance to build
    private IndividualApplicantUpdateRequest individualApplicantUpdateRequest;

    /**
     * Default constructor to initialize the instance
     */
    public IndividualApplicantUpdateRequestBuilder() {
        individualApplicantUpdateRequest = new IndividualApplicantUpdateRequest();
    }

    /**
     * The partners externalId id for the Applicant.
     */
    public IndividualApplicantUpdateRequestBuilder externalId(String externalId) {
        individualApplicantUpdateRequest.setExternalId(externalId);
        return this;
    }

    /**
     * User profile information. Contains data about the person such as name, address, phone, email, etc.
     */
    public IndividualApplicantUpdateRequestBuilder individualProfile(ProfileResource individualProfile) {
        individualApplicantUpdateRequest.setIndividualProfile(individualProfile);
        return this;
    }

    /**
     * Market Place applicant information. Includes the customers history and the subscription type.
     */
    public IndividualApplicantUpdateRequestBuilder mktPlaceApplicant(MarketPlaceApplicantResource mktPlaceApplicant) {
        individualApplicantUpdateRequest.setMktPlaceApplicant(mktPlaceApplicant);
        return this;
    }

    /**
     * A list of social networks the applicant belongs to.
     */
    public IndividualApplicantUpdateRequestBuilder socialNetworks(List<SocialNetworkResource> socialNetworks) {
        individualApplicantUpdateRequest.setSocialNetworks(socialNetworks);
        return this;
    }

    /**
     * language used to communicate
     */
    public IndividualApplicantUpdateRequestBuilder language(String language) {
        individualApplicantUpdateRequest.setLanguage(language);
        return this;
    }

    /**
     * brand id of market place
     */
    public IndividualApplicantUpdateRequestBuilder brand(String brand) {
        individualApplicantUpdateRequest.setBrand(brand);
        return this;
    }

    /**
     * The status of the entity.
     */
    public IndividualApplicantUpdateRequestBuilder status(EntityProductStatusResource status) {
        individualApplicantUpdateRequest.setStatus(status);
        return this;
    }

    public IndividualApplicantUpdateRequestBuilder operationalStatus(ApplicantOperationalStatus operationalStatus) {
        individualApplicantUpdateRequest.setOperationalStatus(operationalStatus);
        return this;
    }

    public IndividualApplicantUpdateRequestBuilder consents(List<ApplicantConsentRequest> consents) {
        individualApplicantUpdateRequest.setConsents(consents);
        return this;
    }

    /**
     * Products requested by marketplace.
     */
    public IndividualApplicantUpdateRequestBuilder products(List<ProductEnum> products) {
        individualApplicantUpdateRequest.setProducts(products);
        return this;
    }

    /**
     * value can be changed by only internal user.
     */
    public IndividualApplicantUpdateRequestBuilder noPostBooking(Boolean noPostBooking) {
        individualApplicantUpdateRequest.setNoPostBooking(noPostBooking);
        return this;
    }

    public IndividualApplicantUpdateRequestBuilder proCategory(ProCategoryResource proCategory) {
        individualApplicantUpdateRequest.setProCategory(proCategory);
        return this;
    }

    /**
     * The primary instrument of the applicant. By default, all the applicant level offerings will be linked to this instrument.
     */
    public IndividualApplicantUpdateRequestBuilder primaryInstrument(String primaryInstrument) {
        individualApplicantUpdateRequest.setPrimaryInstrument(primaryInstrument);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public IndividualApplicantUpdateRequest build() {
        return individualApplicantUpdateRequest;
    }
}