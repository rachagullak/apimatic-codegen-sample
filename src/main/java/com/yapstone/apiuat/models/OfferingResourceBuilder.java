/*
 * YapstoneStagedOnBoardingServicesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.yapstone.apiuat.models;

import java.util.*;

public class OfferingResourceBuilder {
    //the instance to build
    private OfferingResource offeringResource;

    /**
     * Default constructor to initialize the instance
     */
    public OfferingResourceBuilder() {
        offeringResource = new OfferingResource();
    }

    /**
     * Id of the given offering.
     */
    public OfferingResourceBuilder offeringId(String offeringId) {
        offeringResource.setOfferingId(offeringId);
        return this;
    }

    /**
     * Name of the offering.
     */
    public OfferingResourceBuilder offeringName(String offeringName) {
        offeringResource.setOfferingName(offeringName);
        return this;
    }

    /**
     * Aliase for a given offering.
     */
    public OfferingResourceBuilder aliasFor(String aliasFor) {
        offeringResource.setAliasFor(aliasFor);
        return this;
    }

    /**
     * Id of the given instrument to which the offering is associated with.
     */
    public OfferingResourceBuilder instrumentId(String instrumentId) {
        offeringResource.setInstrumentId(instrumentId);
        return this;
    }

    /**
     * Group to which the offering belongs to
     */
    public OfferingResourceBuilder groupId(String groupId) {
        offeringResource.setGroupId(groupId);
        return this;
    }

    /**
     * Flag which decides whether this offering can be paid advanced or checkin.
     */
    public OfferingResourceBuilder escrowFlag(Boolean escrowFlag) {
        offeringResource.setEscrowFlag(escrowFlag);
        return this;
    }

    /**
     * Indicates if this is the default Offering set up for the assetListing
     */
    public OfferingResourceBuilder isDefault(Boolean isDefault) {
        offeringResource.setIsDefault(isDefault);
        return this;
    }

    /**
     * The text to be send to the processor for displaying on the statement.
     */
    public OfferingResourceBuilder softDescriptor(String softDescriptor) {
        offeringResource.setSoftDescriptor(softDescriptor);
        return this;
    }

    /**
     * Entity where the offerings will be attached to.
     */
    public OfferingResourceBuilder associatedEntity(String associatedEntity) {
        offeringResource.setAssociatedEntity(associatedEntity);
        return this;
    }

    /**
     * Entity reference
     */
    public OfferingResourceBuilder entityRef(EntityRef entityRef) {
        offeringResource.setEntityRef(entityRef);
        return this;
    }

    public OfferingResourceBuilder metaData(Object metaData) {
        offeringResource.setMetaData(metaData);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public OfferingResource build() {
        return offeringResource;
    }
}