/*
 * YapstoneStagedOnBoardingServicesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.yapstone.apiuat.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import com.yapstone.apiuat.*;
import com.yapstone.apiuat.models.*;
import com.yapstone.apiuat.exceptions.*;
import com.yapstone.apiuat.http.client.HttpClient;
import com.yapstone.apiuat.http.client.HttpContext;
import com.yapstone.apiuat.http.request.HttpRequest;
import com.yapstone.apiuat.http.response.HttpResponse;
import com.yapstone.apiuat.http.response.HttpStringResponse;
import com.yapstone.apiuat.http.client.APICallBack;
import com.yapstone.apiuat.controllers.syncwrapper.APICallBackCatcher;

public class CustomersController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static CustomersController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the CustomersController class 
     */
    public static CustomersController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new CustomersController();
                }
            }
        }
        return instance;
    }

    /**
     * Creates an Customer Resource in the system.
     * @param    body    Required parameter: Example: 
     * @param    xYapstoneIpaddress    Optional parameter: IP address
     * @param    xYapstoneFpsid    Optional parameter: Device Finger print id.
     * @return    Returns the CustomerResource response from the API call 
     */
    public CustomerResource createCustomer(
                final CustomerResource body,
                final String xYapstoneIpaddress,
                final String xYapstoneFpsid
    ) throws Throwable {

        HttpRequest _request = _buildCreateCustomerRequest(body, xYapstoneIpaddress, xYapstoneFpsid);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateCustomerResponse(_context);
    }

    /**
     * Creates an Customer Resource in the system.
     * @param    body    Required parameter: Example: 
     * @param    xYapstoneIpaddress    Optional parameter: IP address
     * @param    xYapstoneFpsid    Optional parameter: Device Finger print id.
     */
    public void createCustomerAsync(
                final CustomerResource body,
                final String xYapstoneIpaddress,
                final String xYapstoneFpsid,
                final APICallBack<CustomerResource> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateCustomerRequest(body, xYapstoneIpaddress, xYapstoneFpsid);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            CustomerResource returnValue = _handleCreateCustomerResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createCustomer
     */
    private HttpRequest _buildCreateCustomerRequest(
                final CustomerResource body,
                final String xYapstoneIpaddress,
                final String xYapstoneFpsid) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/customers/");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        if (xYapstoneIpaddress != null) {
            _headers.put("x-yapstone-ipaddress", xYapstoneIpaddress);
        }
        if (xYapstoneFpsid != null) {
            _headers.put("x-yapstone-fpsid", xYapstoneFpsid);
        }
        _headers.put("Authorization", Configuration.authorization);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createCustomer
     * @return An object of type CustomerResource
     */
    private CustomerResource _handleCreateCustomerResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 409) {
            throw new CustomerErrorsException("Conflict", _context);
        }
        if (_responseCode == 422) {
            throw new CustomerErrorsException("Unprocessable Entity", _context);
        }
        if ((_responseCode < 200) || (_responseCode > 208)) {
            throw new CustomerErrorsException("Unexpected Error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        CustomerResource _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<CustomerResource>(){});

        return _result;
    }

    /**
     * Fetch a customer.
     * @param    customerId    Required parameter: Example: 
     * @return    Returns the CustomerResource response from the API call 
     */
    public CustomerResource getCustomer(
                final String customerId
    ) throws Throwable {

        HttpRequest _request = _buildGetCustomerRequest(customerId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetCustomerResponse(_context);
    }

    /**
     * Fetch a customer.
     * @param    customerId    Required parameter: Example: 
     */
    public void getCustomerAsync(
                final String customerId,
                final APICallBack<CustomerResource> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetCustomerRequest(customerId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            CustomerResource returnValue = _handleGetCustomerResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getCustomer
     */
    private HttpRequest _buildGetCustomerRequest(
                final String customerId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/customers/{customerId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("customerId", customerId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Authorization", Configuration.authorization);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getCustomer
     * @return An object of type CustomerResource
     */
    private CustomerResource _handleGetCustomerResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 404) {
            throw new CustomerErrorsException("Not Found", _context);
        }
        if ((_responseCode < 200) || (_responseCode > 208)) {
            throw new CustomerErrorsException("Unexpected Error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        CustomerResource _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<CustomerResource>(){});

        return _result;
    }

    /**
     * Modify a Customer.
     * @param    customerId    Required parameter: Example: 
     * @param    body    Required parameter: Example: 
     * @param    xYapstoneIpaddress    Optional parameter: IP address
     * @param    xYapstoneFpsid    Optional parameter: Device Finger print id.
     * @return    Returns the CustomerResource response from the API call 
     */
    public CustomerResource updateCustomer(
                final String customerId,
                final CustomerResource body,
                final String xYapstoneIpaddress,
                final String xYapstoneFpsid
    ) throws Throwable {

        HttpRequest _request = _buildUpdateCustomerRequest(customerId, body, xYapstoneIpaddress, xYapstoneFpsid);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleUpdateCustomerResponse(_context);
    }

    /**
     * Modify a Customer.
     * @param    customerId    Required parameter: Example: 
     * @param    body    Required parameter: Example: 
     * @param    xYapstoneIpaddress    Optional parameter: IP address
     * @param    xYapstoneFpsid    Optional parameter: Device Finger print id.
     */
    public void updateCustomerAsync(
                final String customerId,
                final CustomerResource body,
                final String xYapstoneIpaddress,
                final String xYapstoneFpsid,
                final APICallBack<CustomerResource> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdateCustomerRequest(customerId, body, xYapstoneIpaddress, xYapstoneFpsid);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            CustomerResource returnValue = _handleUpdateCustomerResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updateCustomer
     */
    private HttpRequest _buildUpdateCustomerRequest(
                final String customerId,
                final CustomerResource body,
                final String xYapstoneIpaddress,
                final String xYapstoneFpsid) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/customers/{customerId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("customerId", customerId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        if (xYapstoneIpaddress != null) {
            _headers.put("x-yapstone-ipaddress", xYapstoneIpaddress);
        }
        if (xYapstoneFpsid != null) {
            _headers.put("x-yapstone-fpsid", xYapstoneFpsid);
        }
        _headers.put("Authorization", Configuration.authorization);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().putBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updateCustomer
     * @return An object of type CustomerResource
     */
    private CustomerResource _handleUpdateCustomerResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 404) {
            throw new CustomerErrorsException("Not Found", _context);
        }
        if (_responseCode == 409) {
            throw new CustomerErrorsException("Conflict", _context);
        }
        if (_responseCode == 422) {
            throw new CustomerErrorsException("Unprocessable Entity", _context);
        }
        if ((_responseCode < 200) || (_responseCode > 208)) {
            throw new CustomerErrorsException("Unexpected Error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        CustomerResource _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<CustomerResource>(){});

        return _result;
    }

    /**
     * Delete a customer.
     * @param    customerId    Required parameter: Example: 
     * @return    Returns the CustomerDeactivateResponse response from the API call 
     */
    public CustomerDeactivateResponse deleteCustomer(
                final String customerId
    ) throws Throwable {

        HttpRequest _request = _buildDeleteCustomerRequest(customerId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleDeleteCustomerResponse(_context);
    }

    /**
     * Delete a customer.
     * @param    customerId    Required parameter: Example: 
     */
    public void deleteCustomerAsync(
                final String customerId,
                final APICallBack<CustomerDeactivateResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildDeleteCustomerRequest(customerId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            CustomerDeactivateResponse returnValue = _handleDeleteCustomerResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for deleteCustomer
     */
    private HttpRequest _buildDeleteCustomerRequest(
                final String customerId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/customers/{customerId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("customerId", customerId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Authorization", Configuration.authorization);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for deleteCustomer
     * @return An object of type CustomerDeactivateResponse
     */
    private CustomerDeactivateResponse _handleDeleteCustomerResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 401) {
            throw new CustomerErrorsException("unauthorized", _context);
        }
        if (_responseCode == 404) {
            throw new CustomerErrorsException("not found", _context);
        }
        if (_responseCode == 422) {
            throw new CustomerErrorsException("unprocessable entity", _context);
        }
        if (_responseCode == 500) {
            throw new CustomerErrorsException("internal service error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        CustomerDeactivateResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<CustomerDeactivateResponse>(){});

        return _result;
    }

    /**
     * Fetch a customer with maketPlace.
     * @param    customerId    Required parameter: Example: 
     * @return    Returns the CustomerMarketplaceResource response from the API call 
     */
    public CustomerMarketplaceResource getCustomerMarketplace(
                final String customerId
    ) throws Throwable {

        HttpRequest _request = _buildGetCustomerMarketplaceRequest(customerId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetCustomerMarketplaceResponse(_context);
    }

    /**
     * Fetch a customer with maketPlace.
     * @param    customerId    Required parameter: Example: 
     */
    public void getCustomerMarketplaceAsync(
                final String customerId,
                final APICallBack<CustomerMarketplaceResource> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetCustomerMarketplaceRequest(customerId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            CustomerMarketplaceResource returnValue = _handleGetCustomerMarketplaceResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getCustomerMarketplace
     */
    private HttpRequest _buildGetCustomerMarketplaceRequest(
                final String customerId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/customers/{customerId}/marketplace");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("customerId", customerId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Authorization", Configuration.authorization);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getCustomerMarketplace
     * @return An object of type CustomerMarketplaceResource
     */
    private CustomerMarketplaceResource _handleGetCustomerMarketplaceResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 401) {
            throw new CustomerErrorsException("unauthorized", _context);
        }
        if (_responseCode == 404) {
            throw new CustomerErrorsException("not found", _context);
        }
        if (_responseCode == 422) {
            throw new CustomerErrorsException("unprocessable entity", _context);
        }
        if (_responseCode == 500) {
            throw new CustomerErrorsException("internal service error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        CustomerMarketplaceResource _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<CustomerMarketplaceResource>(){});

        return _result;
    }

}
