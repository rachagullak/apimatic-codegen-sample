/*
 * YapstoneStagedOnBoardingServicesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.yapstone.apiuat.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import com.yapstone.apiuat.*;
import com.yapstone.apiuat.models.*;
import com.yapstone.apiuat.exceptions.*;
import com.yapstone.apiuat.http.client.HttpClient;
import com.yapstone.apiuat.http.client.HttpContext;
import com.yapstone.apiuat.http.request.HttpRequest;
import com.yapstone.apiuat.http.response.HttpResponse;
import com.yapstone.apiuat.http.response.HttpStringResponse;
import com.yapstone.apiuat.http.client.APICallBack;
import com.yapstone.apiuat.controllers.syncwrapper.APICallBackCatcher;

public class AdminController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static AdminController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the AdminController class 
     */
    public static AdminController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new AdminController();
                }
            }
        }
        return instance;
    }

    /**
     * Updates admin specific fields for the given individual applicant id.
     * @param    applicantId    Required parameter: The unique id of the Individual Aplicant.
     * @param    body    Required parameter: The internal fields to be updated by admin.
     * @return    Returns the IndividualApplicantAdminResource response from the API call 
     */
    public IndividualApplicantAdminResource updateIndividualApplicantAdminFields(
                final String applicantId,
                final IndividualApplicantAdminFieldsResource body
    ) throws Throwable {

        HttpRequest _request = _buildUpdateIndividualApplicantAdminFieldsRequest(applicantId, body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleUpdateIndividualApplicantAdminFieldsResponse(_context);
    }

    /**
     * Updates admin specific fields for the given individual applicant id.
     * @param    applicantId    Required parameter: The unique id of the Individual Aplicant.
     * @param    body    Required parameter: The internal fields to be updated by admin.
     */
    public void updateIndividualApplicantAdminFieldsAsync(
                final String applicantId,
                final IndividualApplicantAdminFieldsResource body,
                final APICallBack<IndividualApplicantAdminResource> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdateIndividualApplicantAdminFieldsRequest(applicantId, body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            IndividualApplicantAdminResource returnValue = _handleUpdateIndividualApplicantAdminFieldsResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updateIndividualApplicantAdminFields
     */
    private HttpRequest _buildUpdateIndividualApplicantAdminFieldsRequest(
                final String applicantId,
                final IndividualApplicantAdminFieldsResource body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/admin/individual-applicants/{applicantId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("applicantId", applicantId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Authorization", Configuration.authorization);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().putBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updateIndividualApplicantAdminFields
     * @return An object of type IndividualApplicantAdminResource
     */
    private IndividualApplicantAdminResource _handleUpdateIndividualApplicantAdminFieldsResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 401) {
            throw new APIException("unauthorized", _context);
        }
        if (_responseCode == 404) {
            throw new APIException("not found", _context);
        }
        if (_responseCode == 422) {
            throw new APIException("unprocessable entity", _context);
        }
        if (_responseCode == 500) {
            throw new APIException("internal service error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        IndividualApplicantAdminResource _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<IndividualApplicantAdminResource>(){});

        return _result;
    }

    /**
     * Retrieves admin specific fields for the given individual applicant id.
     * @param    applicantId    Required parameter: The unique id of the Individual Aplicant.
     * @return    Returns the IndividualApplicantAdminResource response from the API call 
     */
    public IndividualApplicantAdminResource getIndividualApplicantAdmin(
                final String applicantId
    ) throws Throwable {

        HttpRequest _request = _buildGetIndividualApplicantAdminRequest(applicantId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetIndividualApplicantAdminResponse(_context);
    }

    /**
     * Retrieves admin specific fields for the given individual applicant id.
     * @param    applicantId    Required parameter: The unique id of the Individual Aplicant.
     */
    public void getIndividualApplicantAdminAsync(
                final String applicantId,
                final APICallBack<IndividualApplicantAdminResource> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetIndividualApplicantAdminRequest(applicantId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            IndividualApplicantAdminResource returnValue = _handleGetIndividualApplicantAdminResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getIndividualApplicantAdmin
     */
    private HttpRequest _buildGetIndividualApplicantAdminRequest(
                final String applicantId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/admin/individual-applicants/{applicantId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("applicantId", applicantId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Authorization", Configuration.authorization);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getIndividualApplicantAdmin
     * @return An object of type IndividualApplicantAdminResource
     */
    private IndividualApplicantAdminResource _handleGetIndividualApplicantAdminResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 401) {
            throw new APIException("unauthorized", _context);
        }
        if (_responseCode == 404) {
            throw new APIException("not found", _context);
        }
        if (_responseCode == 422) {
            throw new APIException("unprocessable entity", _context);
        }
        if (_responseCode == 500) {
            throw new APIException("internal service error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        IndividualApplicantAdminResource _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<IndividualApplicantAdminResource>(){});

        return _result;
    }

    /**
     * Updates admin specific fields for the given business applicant id.
     * @param    applicantId    Required parameter: The unique id of the Contract Resource.
     * @param    body    Required parameter: The internal fields to be updated by admin.
     * @return    Returns the BusinessApplicantAdminResource response from the API call 
     */
    public BusinessApplicantAdminResource updateBusinessApplicantAdminFields(
                final String applicantId,
                final BusinessApplicantAdminFieldsResource body
    ) throws Throwable {

        HttpRequest _request = _buildUpdateBusinessApplicantAdminFieldsRequest(applicantId, body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleUpdateBusinessApplicantAdminFieldsResponse(_context);
    }

    /**
     * Updates admin specific fields for the given business applicant id.
     * @param    applicantId    Required parameter: The unique id of the Contract Resource.
     * @param    body    Required parameter: The internal fields to be updated by admin.
     */
    public void updateBusinessApplicantAdminFieldsAsync(
                final String applicantId,
                final BusinessApplicantAdminFieldsResource body,
                final APICallBack<BusinessApplicantAdminResource> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdateBusinessApplicantAdminFieldsRequest(applicantId, body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            BusinessApplicantAdminResource returnValue = _handleUpdateBusinessApplicantAdminFieldsResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updateBusinessApplicantAdminFields
     */
    private HttpRequest _buildUpdateBusinessApplicantAdminFieldsRequest(
                final String applicantId,
                final BusinessApplicantAdminFieldsResource body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/admin/business-applicants/{applicantId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("applicantId", applicantId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Authorization", Configuration.authorization);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().putBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updateBusinessApplicantAdminFields
     * @return An object of type BusinessApplicantAdminResource
     */
    private BusinessApplicantAdminResource _handleUpdateBusinessApplicantAdminFieldsResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 401) {
            throw new APIException("unauthorized", _context);
        }
        if (_responseCode == 404) {
            throw new APIException("not found", _context);
        }
        if (_responseCode == 422) {
            throw new APIException("unprocessable entity", _context);
        }
        if (_responseCode == 500) {
            throw new APIException("internal service error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        BusinessApplicantAdminResource _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<BusinessApplicantAdminResource>(){});

        return _result;
    }

    /**
     * Retrieves admin specific fields for the given individual applicant id.
     * @param    applicantId    Required parameter: The unique id of the Individual Aplicant.
     * @return    Returns the BusinessApplicantAdminResource response from the API call 
     */
    public BusinessApplicantAdminResource getBusinessApplicantAdmin(
                final String applicantId
    ) throws Throwable {

        HttpRequest _request = _buildGetBusinessApplicantAdminRequest(applicantId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetBusinessApplicantAdminResponse(_context);
    }

    /**
     * Retrieves admin specific fields for the given individual applicant id.
     * @param    applicantId    Required parameter: The unique id of the Individual Aplicant.
     */
    public void getBusinessApplicantAdminAsync(
                final String applicantId,
                final APICallBack<BusinessApplicantAdminResource> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetBusinessApplicantAdminRequest(applicantId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            BusinessApplicantAdminResource returnValue = _handleGetBusinessApplicantAdminResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getBusinessApplicantAdmin
     */
    private HttpRequest _buildGetBusinessApplicantAdminRequest(
                final String applicantId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/admin/business-applicants/{applicantId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("applicantId", applicantId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Authorization", Configuration.authorization);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getBusinessApplicantAdmin
     * @return An object of type BusinessApplicantAdminResource
     */
    private BusinessApplicantAdminResource _handleGetBusinessApplicantAdminResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 401) {
            throw new APIException("unauthorized", _context);
        }
        if (_responseCode == 404) {
            throw new APIException("not found", _context);
        }
        if (_responseCode == 422) {
            throw new APIException("unprocessable entity", _context);
        }
        if (_responseCode == 500) {
            throw new APIException("internal service error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        BusinessApplicantAdminResource _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<BusinessApplicantAdminResource>(){});

        return _result;
    }

    /**
     * Retrieves an Payout Instrument Resource from the system for the given instrumentId.
     * @param    instrumentId    Required parameter: The unique id of the Instrument Resource.
     * @return    Returns the PayoutInstrumentResource response from the API call 
     */
    public PayoutInstrumentResource getInstrumentByAdmin(
                final String instrumentId
    ) throws Throwable {

        HttpRequest _request = _buildGetInstrumentByAdminRequest(instrumentId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetInstrumentByAdminResponse(_context);
    }

    /**
     * Retrieves an Payout Instrument Resource from the system for the given instrumentId.
     * @param    instrumentId    Required parameter: The unique id of the Instrument Resource.
     */
    public void getInstrumentByAdminAsync(
                final String instrumentId,
                final APICallBack<PayoutInstrumentResource> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetInstrumentByAdminRequest(instrumentId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            PayoutInstrumentResource returnValue = _handleGetInstrumentByAdminResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getInstrumentByAdmin
     */
    private HttpRequest _buildGetInstrumentByAdminRequest(
                final String instrumentId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/admin/instruments/{instrumentId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("instrumentId", instrumentId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Authorization", Configuration.authorization);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getInstrumentByAdmin
     * @return An object of type PayoutInstrumentResource
     */
    private PayoutInstrumentResource _handleGetInstrumentByAdminResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 401) {
            throw new APIException("unauthorized", _context);
        }
        if (_responseCode == 404) {
            throw new APIException("not found", _context);
        }
        if (_responseCode == 500) {
            throw new APIException("internal service error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        PayoutInstrumentResource _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<PayoutInstrumentResource>(){});

        return _result;
    }

}
