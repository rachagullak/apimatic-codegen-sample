/*
 * YapstoneStagedOnBoardingServicesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.yapstone.apiuat.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import com.yapstone.apiuat.*;
import com.yapstone.apiuat.models.*;
import com.yapstone.apiuat.exceptions.*;
import com.yapstone.apiuat.http.client.HttpClient;
import com.yapstone.apiuat.http.client.HttpContext;
import com.yapstone.apiuat.http.request.HttpRequest;
import com.yapstone.apiuat.http.response.HttpResponse;
import com.yapstone.apiuat.http.response.HttpStringResponse;
import com.yapstone.apiuat.http.client.APICallBack;
import com.yapstone.apiuat.controllers.syncwrapper.APICallBackCatcher;

public class BusinessApplicantsController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static BusinessApplicantsController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the BusinessApplicantsController class 
     */
    public static BusinessApplicantsController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new BusinessApplicantsController();
                }
            }
        }
        return instance;
    }

    /**
     * Get all Business Applicant Resources the actor has access to in the system.
     * @param    externalId    Required parameter: The identifier used by an external client.
     * @param    page    Optional parameter: page number
     * @param    size    Optional parameter: Maximum number of records to return per page
     * @return    Returns the BusinessApplicantsResource response from the API call 
     */
    public BusinessApplicantsResource getBusinessApplicants(
                final String externalId,
                final Integer page,
                final Integer size
    ) throws Throwable {

        HttpRequest _request = _buildGetBusinessApplicantsRequest(externalId, page, size);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetBusinessApplicantsResponse(_context);
    }

    /**
     * Get all Business Applicant Resources the actor has access to in the system.
     * @param    externalId    Required parameter: The identifier used by an external client.
     * @param    page    Optional parameter: page number
     * @param    size    Optional parameter: Maximum number of records to return per page
     */
    public void getBusinessApplicantsAsync(
                final String externalId,
                final Integer page,
                final Integer size,
                final APICallBack<BusinessApplicantsResource> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetBusinessApplicantsRequest(externalId, page, size);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            BusinessApplicantsResource returnValue = _handleGetBusinessApplicantsResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getBusinessApplicants
     */
    private HttpRequest _buildGetBusinessApplicantsRequest(
                final String externalId,
                final Integer page,
                final Integer size) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/business-applicants");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("externalId", externalId);
        if (page != null) {
            _queryParameters.put("page", page);
        }
        if (size != null) {
            _queryParameters.put("size", size);
        }
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Authorization", Configuration.authorization);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getBusinessApplicants
     * @return An object of type BusinessApplicantsResource
     */
    private BusinessApplicantsResource _handleGetBusinessApplicantsResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 401) {
            throw new APIException("unauthorized", _context);
        }
        if (_responseCode == 422) {
            throw new APIException("unprocessable", _context);
        }
        if (_responseCode == 500) {
            throw new APIException("internal service error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        BusinessApplicantsResource _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<BusinessApplicantsResource>(){});

        return _result;
    }

    /**
     * Creates a Business Applicant Resource in the system.
     * @param    body    Required parameter: The Business Applicant Resource to be created.
     * @param    xYapstoneFpsid    Optional parameter: Example: 
     * @return    Returns the BusinessApplicantResource response from the API call 
     */
    public BusinessApplicantResource createBusinessApplicant(
                final BusinessApplicantRequest body,
                final String xYapstoneFpsid
    ) throws Throwable {

        HttpRequest _request = _buildCreateBusinessApplicantRequest(body, xYapstoneFpsid);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateBusinessApplicantResponse(_context);
    }

    /**
     * Creates a Business Applicant Resource in the system.
     * @param    body    Required parameter: The Business Applicant Resource to be created.
     * @param    xYapstoneFpsid    Optional parameter: Example: 
     */
    public void createBusinessApplicantAsync(
                final BusinessApplicantRequest body,
                final String xYapstoneFpsid,
                final APICallBack<BusinessApplicantResource> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateBusinessApplicantRequest(body, xYapstoneFpsid);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            BusinessApplicantResource returnValue = _handleCreateBusinessApplicantResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createBusinessApplicant
     */
    private HttpRequest _buildCreateBusinessApplicantRequest(
                final BusinessApplicantRequest body,
                final String xYapstoneFpsid) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/business-applicants");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        if (xYapstoneFpsid != null) {
            _headers.put("x-yapstone-fpsid", xYapstoneFpsid);
        }
        _headers.put("Authorization", Configuration.authorization);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createBusinessApplicant
     * @return An object of type BusinessApplicantResource
     */
    private BusinessApplicantResource _handleCreateBusinessApplicantResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 401) {
            throw new APIException("unauthorized", _context);
        }
        if (_responseCode == 422) {
            throw new APIException("unprocessable entity", _context);
        }
        if (_responseCode == 500) {
            throw new APIException("internal service error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        BusinessApplicantResource _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<BusinessApplicantResource>(){});

        return _result;
    }

    /**
     * Retrieves an Business Applicant Resource from the system for the given applicantId.
     * @param    applicantId    Required parameter: The unique id of the Business Applicant Resource.
     * @return    Returns the BusinessApplicantResource response from the API call 
     */
    public BusinessApplicantResource getBusinessApplicant(
                final String applicantId
    ) throws Throwable {

        HttpRequest _request = _buildGetBusinessApplicantRequest(applicantId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetBusinessApplicantResponse(_context);
    }

    /**
     * Retrieves an Business Applicant Resource from the system for the given applicantId.
     * @param    applicantId    Required parameter: The unique id of the Business Applicant Resource.
     */
    public void getBusinessApplicantAsync(
                final String applicantId,
                final APICallBack<BusinessApplicantResource> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetBusinessApplicantRequest(applicantId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            BusinessApplicantResource returnValue = _handleGetBusinessApplicantResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getBusinessApplicant
     */
    private HttpRequest _buildGetBusinessApplicantRequest(
                final String applicantId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/business-applicants/{applicantId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("applicantId", applicantId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Authorization", Configuration.authorization);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getBusinessApplicant
     * @return An object of type BusinessApplicantResource
     */
    private BusinessApplicantResource _handleGetBusinessApplicantResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 401) {
            throw new APIException("unauthorized", _context);
        }
        if (_responseCode == 404) {
            throw new APIException("not found", _context);
        }
        if (_responseCode == 500) {
            throw new APIException("internal service error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        BusinessApplicantResource _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<BusinessApplicantResource>(){});

        return _result;
    }

    /**
     * Updates the Business Applicant Resource.
     * @param    applicantId    Required parameter: The unique id of the BusinessApplicant Resource.
     * @param    body    Required parameter: The Business Applicant Resource to be created after updation.
     * @param    xYapstoneFpsid    Optional parameter: Example: 
     * @return    Returns the BusinessApplicantResource response from the API call 
     */
    public BusinessApplicantResource updateBusinessApplicant(
                final String applicantId,
                final BusinessApplicantUpdateRequest body,
                final String xYapstoneFpsid
    ) throws Throwable {

        HttpRequest _request = _buildUpdateBusinessApplicantRequest(applicantId, body, xYapstoneFpsid);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleUpdateBusinessApplicantResponse(_context);
    }

    /**
     * Updates the Business Applicant Resource.
     * @param    applicantId    Required parameter: The unique id of the BusinessApplicant Resource.
     * @param    body    Required parameter: The Business Applicant Resource to be created after updation.
     * @param    xYapstoneFpsid    Optional parameter: Example: 
     */
    public void updateBusinessApplicantAsync(
                final String applicantId,
                final BusinessApplicantUpdateRequest body,
                final String xYapstoneFpsid,
                final APICallBack<BusinessApplicantResource> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdateBusinessApplicantRequest(applicantId, body, xYapstoneFpsid);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            BusinessApplicantResource returnValue = _handleUpdateBusinessApplicantResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updateBusinessApplicant
     */
    private HttpRequest _buildUpdateBusinessApplicantRequest(
                final String applicantId,
                final BusinessApplicantUpdateRequest body,
                final String xYapstoneFpsid) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/business-applicants/{applicantId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("applicantId", applicantId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        if (xYapstoneFpsid != null) {
            _headers.put("x-yapstone-fpsid", xYapstoneFpsid);
        }
        _headers.put("Authorization", Configuration.authorization);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().putBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updateBusinessApplicant
     * @return An object of type BusinessApplicantResource
     */
    private BusinessApplicantResource _handleUpdateBusinessApplicantResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 401) {
            throw new APIException("unauthorized", _context);
        }
        if (_responseCode == 404) {
            throw new APIException("not found", _context);
        }
        if (_responseCode == 422) {
            throw new APIException("unprocessable entity", _context);
        }
        if (_responseCode == 500) {
            throw new APIException("internal service error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        BusinessApplicantResource _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<BusinessApplicantResource>(){});

        return _result;
    }

    /**
     * Deactivates the Business Applicant Resource in the system.
     * @param    applicantId    Required parameter: The unique id of the Applicant Resource.
     * @return    Returns the DeactivateResponse response from the API call 
     */
    public DeactivateResponse deleteDeactivateBusinessApplicant(
                final String applicantId
    ) throws Throwable {

        HttpRequest _request = _buildDeleteDeactivateBusinessApplicantRequest(applicantId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleDeleteDeactivateBusinessApplicantResponse(_context);
    }

    /**
     * Deactivates the Business Applicant Resource in the system.
     * @param    applicantId    Required parameter: The unique id of the Applicant Resource.
     */
    public void deleteDeactivateBusinessApplicantAsync(
                final String applicantId,
                final APICallBack<DeactivateResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildDeleteDeactivateBusinessApplicantRequest(applicantId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            DeactivateResponse returnValue = _handleDeleteDeactivateBusinessApplicantResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for deleteDeactivateBusinessApplicant
     */
    private HttpRequest _buildDeleteDeactivateBusinessApplicantRequest(
                final String applicantId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/business-applicants/{applicantId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("applicantId", applicantId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Authorization", Configuration.authorization);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for deleteDeactivateBusinessApplicant
     * @return An object of type DeactivateResponse
     */
    private DeactivateResponse _handleDeleteDeactivateBusinessApplicantResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 401) {
            throw new APIException("unauthorized", _context);
        }
        if (_responseCode == 404) {
            throw new APIException("not found", _context);
        }
        if (_responseCode == 422) {
            throw new APIException("unprocessable entity", _context);
        }
        if (_responseCode == 500) {
            throw new APIException("internal service error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        DeactivateResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DeactivateResponse>(){});

        return _result;
    }

}
