/*
 * YapstoneStagedOnBoardingServicesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.yapstone.apiuat.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import com.yapstone.apiuat.*;
import com.yapstone.apiuat.models.*;
import com.yapstone.apiuat.exceptions.*;
import com.yapstone.apiuat.http.client.HttpClient;
import com.yapstone.apiuat.http.client.HttpContext;
import com.yapstone.apiuat.http.request.HttpRequest;
import com.yapstone.apiuat.http.response.HttpResponse;
import com.yapstone.apiuat.http.response.HttpStringResponse;
import com.yapstone.apiuat.http.client.APICallBack;
import com.yapstone.apiuat.controllers.syncwrapper.APICallBackCatcher;

public class InstrumentsController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static InstrumentsController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the InstrumentsController class 
     */
    public static InstrumentsController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new InstrumentsController();
                }
            }
        }
        return instance;
    }

    /**
     * Get all Payout Instrument Resources the actor has access to in the system.
     * @param    page    Optional parameter: page number
     * @param    size    Optional parameter: Maximum number of records to return per page
     * @return    Returns the PayoutInstrumentsResource response from the API call 
     */
    public PayoutInstrumentsResource getInstruments(
                final Integer page,
                final Integer size
    ) throws Throwable {

        HttpRequest _request = _buildGetInstrumentsRequest(page, size);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetInstrumentsResponse(_context);
    }

    /**
     * Get all Payout Instrument Resources the actor has access to in the system.
     * @param    page    Optional parameter: page number
     * @param    size    Optional parameter: Maximum number of records to return per page
     */
    public void getInstrumentsAsync(
                final Integer page,
                final Integer size,
                final APICallBack<PayoutInstrumentsResource> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetInstrumentsRequest(page, size);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            PayoutInstrumentsResource returnValue = _handleGetInstrumentsResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getInstruments
     */
    private HttpRequest _buildGetInstrumentsRequest(
                final Integer page,
                final Integer size) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/instruments");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        if (page != null) {
            _queryParameters.put("page", page);
        }
        if (size != null) {
            _queryParameters.put("size", size);
        }
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Authorization", Configuration.authorization);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getInstruments
     * @return An object of type PayoutInstrumentsResource
     */
    private PayoutInstrumentsResource _handleGetInstrumentsResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 401) {
            throw new APIException("unauthorized", _context);
        }
        if (_responseCode == 422) {
            throw new APIException("unprocessable", _context);
        }
        if (_responseCode == 500) {
            throw new APIException("internal service error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        PayoutInstrumentsResource _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<PayoutInstrumentsResource>(){});

        return _result;
    }

    /**
     * Creates an Payout Instrument Resource in the system.
     * @param    body    Required parameter: The Payout Instrument Request Resource to be created.
     * @param    xYapstoneFpsid    Optional parameter: Example: 
     * @return    Returns the PayoutInstrumentResource response from the API call 
     */
    public PayoutInstrumentResource createInstrument(
                final PayoutInstrumentRequest body,
                final String xYapstoneFpsid
    ) throws Throwable {

        HttpRequest _request = _buildCreateInstrumentRequest(body, xYapstoneFpsid);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateInstrumentResponse(_context);
    }

    /**
     * Creates an Payout Instrument Resource in the system.
     * @param    body    Required parameter: The Payout Instrument Request Resource to be created.
     * @param    xYapstoneFpsid    Optional parameter: Example: 
     */
    public void createInstrumentAsync(
                final PayoutInstrumentRequest body,
                final String xYapstoneFpsid,
                final APICallBack<PayoutInstrumentResource> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateInstrumentRequest(body, xYapstoneFpsid);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            PayoutInstrumentResource returnValue = _handleCreateInstrumentResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createInstrument
     */
    private HttpRequest _buildCreateInstrumentRequest(
                final PayoutInstrumentRequest body,
                final String xYapstoneFpsid) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/instruments");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        if (xYapstoneFpsid != null) {
            _headers.put("x-yapstone-fpsid", xYapstoneFpsid);
        }
        _headers.put("Authorization", Configuration.authorization);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createInstrument
     * @return An object of type PayoutInstrumentResource
     */
    private PayoutInstrumentResource _handleCreateInstrumentResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 401) {
            throw new APIException("unauthorized", _context);
        }
        if (_responseCode == 422) {
            throw new APIException("unprocessable entity", _context);
        }
        if (_responseCode == 500) {
            throw new APIException("internal service error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        PayoutInstrumentResource _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<PayoutInstrumentResource>(){});

        return _result;
    }

    /**
     * Retrieves an Payout Instrument Resource from the system for the given payoutInstrumentId.
     * @param    instrumentId    Required parameter: The unique id of the Instrument Resource.
     * @return    Returns the PayoutInstrumentResource response from the API call 
     */
    public PayoutInstrumentResource getInstrument(
                final String instrumentId
    ) throws Throwable {

        HttpRequest _request = _buildGetInstrumentRequest(instrumentId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetInstrumentResponse(_context);
    }

    /**
     * Retrieves an Payout Instrument Resource from the system for the given payoutInstrumentId.
     * @param    instrumentId    Required parameter: The unique id of the Instrument Resource.
     */
    public void getInstrumentAsync(
                final String instrumentId,
                final APICallBack<PayoutInstrumentResource> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetInstrumentRequest(instrumentId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            PayoutInstrumentResource returnValue = _handleGetInstrumentResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getInstrument
     */
    private HttpRequest _buildGetInstrumentRequest(
                final String instrumentId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/instruments/{instrumentId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("instrumentId", instrumentId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Authorization", Configuration.authorization);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getInstrument
     * @return An object of type PayoutInstrumentResource
     */
    private PayoutInstrumentResource _handleGetInstrumentResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 401) {
            throw new APIException("unauthorized", _context);
        }
        if (_responseCode == 404) {
            throw new APIException("not found", _context);
        }
        if (_responseCode == 500) {
            throw new APIException("internal service error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        PayoutInstrumentResource _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<PayoutInstrumentResource>(){});

        return _result;
    }

    /**
     * Updates the PayoutInstrument Resource.
     * @param    instrumentId    Required parameter: The unique id of the Instrument Resource.
     * @param    body    Required parameter: The PayoutInstrument Request Resource to be updated.
     * @param    xYapstoneFpsid    Optional parameter: Example: 
     * @return    Returns the PayoutInstrumentResource response from the API call 
     */
    public PayoutInstrumentResource updateInstrument(
                final String instrumentId,
                final PayoutInstrumentUpdateRequest body,
                final String xYapstoneFpsid
    ) throws Throwable {

        HttpRequest _request = _buildUpdateInstrumentRequest(instrumentId, body, xYapstoneFpsid);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleUpdateInstrumentResponse(_context);
    }

    /**
     * Updates the PayoutInstrument Resource.
     * @param    instrumentId    Required parameter: The unique id of the Instrument Resource.
     * @param    body    Required parameter: The PayoutInstrument Request Resource to be updated.
     * @param    xYapstoneFpsid    Optional parameter: Example: 
     */
    public void updateInstrumentAsync(
                final String instrumentId,
                final PayoutInstrumentUpdateRequest body,
                final String xYapstoneFpsid,
                final APICallBack<PayoutInstrumentResource> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdateInstrumentRequest(instrumentId, body, xYapstoneFpsid);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            PayoutInstrumentResource returnValue = _handleUpdateInstrumentResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updateInstrument
     */
    private HttpRequest _buildUpdateInstrumentRequest(
                final String instrumentId,
                final PayoutInstrumentUpdateRequest body,
                final String xYapstoneFpsid) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/instruments/{instrumentId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("instrumentId", instrumentId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        if (xYapstoneFpsid != null) {
            _headers.put("x-yapstone-fpsid", xYapstoneFpsid);
        }
        _headers.put("Authorization", Configuration.authorization);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().putBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updateInstrument
     * @return An object of type PayoutInstrumentResource
     */
    private PayoutInstrumentResource _handleUpdateInstrumentResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 401) {
            throw new APIException("unauthorized", _context);
        }
        if (_responseCode == 404) {
            throw new APIException("not found", _context);
        }
        if (_responseCode == 422) {
            throw new APIException("unprocessable entity", _context);
        }
        if (_responseCode == 500) {
            throw new APIException("internal service error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        PayoutInstrumentResource _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<PayoutInstrumentResource>(){});

        return _result;
    }

    /**
     * Deactivates the Payout Instrument Resource in the system.
     * @param    instrumentId    Required parameter: The unique id of the Instrument Resource.
     * @return    Returns the DeactivateResponse response from the API call 
     */
    public DeactivateResponse deleteDeactivateInstrument(
                final String instrumentId
    ) throws Throwable {

        HttpRequest _request = _buildDeleteDeactivateInstrumentRequest(instrumentId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleDeleteDeactivateInstrumentResponse(_context);
    }

    /**
     * Deactivates the Payout Instrument Resource in the system.
     * @param    instrumentId    Required parameter: The unique id of the Instrument Resource.
     */
    public void deleteDeactivateInstrumentAsync(
                final String instrumentId,
                final APICallBack<DeactivateResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildDeleteDeactivateInstrumentRequest(instrumentId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            DeactivateResponse returnValue = _handleDeleteDeactivateInstrumentResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for deleteDeactivateInstrument
     */
    private HttpRequest _buildDeleteDeactivateInstrumentRequest(
                final String instrumentId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/instruments/{instrumentId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("instrumentId", instrumentId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Authorization", Configuration.authorization);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for deleteDeactivateInstrument
     * @return An object of type DeactivateResponse
     */
    private DeactivateResponse _handleDeleteDeactivateInstrumentResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 401) {
            throw new APIException("unauthorized", _context);
        }
        if (_responseCode == 404) {
            throw new APIException("not found", _context);
        }
        if (_responseCode == 422) {
            throw new APIException("unprocessable entity", _context);
        }
        if (_responseCode == 500) {
            throw new APIException("internal service error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        DeactivateResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DeactivateResponse>(){});

        return _result;
    }

    /**
     * Retrieves Instrument Resources from the system for the given managedBy.
     * @param    managedBy    Required parameter: The id of the  ManagedBy for getting Payout Instrument Resource.
     * @return    Returns the PayoutInstrumentsResource response from the API call 
     */
    public PayoutInstrumentsResource getInstrumentUsingManagedBy(
                final String managedBy
    ) throws Throwable {

        HttpRequest _request = _buildGetInstrumentUsingManagedByRequest(managedBy);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetInstrumentUsingManagedByResponse(_context);
    }

    /**
     * Retrieves Instrument Resources from the system for the given managedBy.
     * @param    managedBy    Required parameter: The id of the  ManagedBy for getting Payout Instrument Resource.
     */
    public void getInstrumentUsingManagedByAsync(
                final String managedBy,
                final APICallBack<PayoutInstrumentsResource> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetInstrumentUsingManagedByRequest(managedBy);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            PayoutInstrumentsResource returnValue = _handleGetInstrumentUsingManagedByResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getInstrumentUsingManagedBy
     */
    private HttpRequest _buildGetInstrumentUsingManagedByRequest(
                final String managedBy) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/instruments/managedBy/{managedBy}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("managedBy", managedBy);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Authorization", Configuration.authorization);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getInstrumentUsingManagedBy
     * @return An object of type PayoutInstrumentsResource
     */
    private PayoutInstrumentsResource _handleGetInstrumentUsingManagedByResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 401) {
            throw new APIException("unauthorized", _context);
        }
        if (_responseCode == 404) {
            throw new APIException("not found", _context);
        }
        if (_responseCode == 500) {
            throw new APIException("internal service error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        PayoutInstrumentsResource _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<PayoutInstrumentsResource>(){});

        return _result;
    }

}
